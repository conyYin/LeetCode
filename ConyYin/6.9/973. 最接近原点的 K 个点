//优先队列
class Solution {
    private class DistCmp implements Comparator<Integer[]>{
        public int compare(Integer[]a, Integer[]b){
            return Double.compare(Math.pow(b[0], 2) + Math.pow(b[1], 2),
                Math.pow(a[0], 2) + Math.pow(a[1], 2));
        }
    }

    public int[][] kClosest(int[][] points, int K) {
        DistCmp cmp=new DistCmp();
        PriorityQueue<Integer[]> q=new PriorityQueue<>(cmp);
        for(int i=0;i<points.length;i++){
            Integer[] point = new Integer[]{points[i][0],points[i][1]};
            if(i<K){
                q.add(point);
            }else{
                if(cmp.compare(point, q.peek())<0){
                    q.poll();
                    q.add(point);
                }
            }
        }
        int [][]result=new int[K][2];
        for(int i=0;i<K;i++){
            Integer[] point=q.poll();
            result[i][0]=point[0];
            result[i][1]=point[1];
        }
        return result;
    }
}
